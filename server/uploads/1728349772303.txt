export function response( input ) {
	 //Insert your code here 
	 const response = []; 
	for (var i=1; i <= input; i++){
		if (i % 15 == 0) response.push("FizzBuzz");
		else if (i % 3 == 0) response.push("Fizz");
		else if (i % 5 == 0) response.push("Buzz");
		else response.push(i);
	}
	return response;
}
=========================
фибоначчи

export function fibonacciSeriesPrinter( number ) {
  var fibonacciSeries = function* (number) {
	if (number === 0) {
	   return [0];
	} else if (number === 1) {
	  return [1,1];
	} else {
	  var values = fibonacciSeries(number - 1);
	  values.push(values[values.length - 1] + values[values.length - 2]);
	  yield values;
	}
  };
  
  return fibonacciSeries(number).next().value;
}
=====================================

Напишите функцию пипьегnumber_cordinality ‚ которая
принимает целое число и возвращает строку, следующим
образом:
1. Вернуть строку, zero если число заканчивается на 0
2. Вернуть строку, five если число заканчивается на 5
3. Возвращает строку, even если число четное (делится на И не заканчивается на 0)
4. Вернуть строку, odd если число нечетное (не делится на И не заканчивается цифрой 5.)

Пожалуйста, убедитесь, что ваша возвращаемая строка точно
такая же, как указано выше, используя строчные буквы.

Примеры:

Вход: 100
Выход: zero 

Вход: 88
Выход: even 

Вход: 155
Выход: five 
=======================================

Создайте функцию на Javascript removeNSmallest с подробным объяснением и комментариями в коде, которая удаляет n наименьшие числа из
массива целых чисел arr, принимая во внимание
следующее:
* Целое число n — это количество элементов, которые
необходимо удалить из массива.
* Если есть несколько элементов с одинаковым
значением, сначала удалите элементы с более низким
индексом.

> Если n больше длины массива, вернуть пустой массив.

ЕСЛИ n равно нулю или меньше, вернуть исходный
массив.
* Не меняйте порядок оставшихся элементов.

примеры:

removeNSmallest( -10 , [1,2,3,4,5])
должно получиться: [1,2,3,4,5]

Вход: 99
Выход: odd 
=========================================

/**
 * Функция number_cordinality принимает целое число и возвращает строку,
 * указывающую на характеристику числа, следующим образом:
 * - "zero", если число заканчивается на 0
 * - "five", если число заканчивается на 5
 * - "even", если число четное (делится на 2 и не заканчивается на 0)
 * - "odd", если число нечетное (не делится на 2 и не заканчивается цифрой 5)
 * @param {number} num Целое число для проверки
 * @returns {string} Строка, указывающая на характеристику числа
 */
function number_cordinality(num) {
  // Проверяем, заканчивается ли число на 0
  if (num % 10 === 0) {
    return "zero";
  }
  // Проверяем, заканчивается ли число на 5
  else if (num % 10 === 5) {
    return "five";
  }
  // Проверяем, является ли число четным и не заканчивается на 0
  else if (num % 2 === 0) {
    return "even";
  }
  // Иначе, число нечетное и не заканчивается на 5
  else {
    return "odd";
  }
}
==========================================
function number_cordinality(num) {
  if (num % 10 === 0) {
    return "zero";
  } else if (num % 10 === 5) {
    return "five";
  } else if (num % 2 === 0) {
    return "even";
  } else {
    return "odd";
  }
}
======================================
Создайте функцию на Javascript removeNSmallest с подробным объяснением и комментариями в коде, которая удаляет n наименьшие числа из
массива целых чисел arr, принимая во внимание
следующее:
* Целое число n — это количество элементов, которые
необходимо удалить из массива.
* Если есть несколько элементов с одинаковым
значением, сначала удалите элементы с более низким
индексом.

> Если n больше длины массива, вернуть пустой массив.

ЕСЛИ n равно нулю или меньше, вернуть исходный
массив.
* Не меняйте порядок оставшихся элементов.

примеры:

removeNSmallest( -10 , [1,2,3,4,5])
должно получиться: [1,2,3,4,5]
===
function removeNSmallest(n, arr) {
  // если n равно 0 или меньше, возвращаем исходный массив
  if (n <= 0) {
    return arr;
  }
  // если n больше или равно длине массива, возвращаем пустой массив
  if (n >= arr.length) {
    return [];
  }
  // создаем копию исходного массива, чтобы не менять его порядок
  const copyArr = arr.slice();
  // сортируем копию массива по возрастанию элементов
  copyArr.sort((a, b) => a - b);
  // удаляем n наименьших элементов из копии массива
  copyArr.splice(0, n);
  // создаем новый массив, который будет содержать элементы, не входящие в копию массива
  const result = [];
  for (let i = 0; i < arr.length; i++) {
    // если текущий элемент не входит в копию массива, добавляем его в результат
    if (!copyArr.includes(arr[i])) {
      result.push(arr[i]);
    }
  }
  // возвращаем результат
  return result;
}
